[{"CountLineCode": {"MAX": 302, "MIN": 3}, "CountLineComment": {"MAX": 62, "MIN": 0}, "Methods": ["org.languagetool.gui.ConfigurationDialog.show()", "org.wordpress.android.ui.stats.StatsUtils.openPostInReaderOrInAppWebview()", "org.springframework.http.converter.AbstractHttpMessageConverter.write()", "org.springframework.test.util.JsonPathExpectationsHelper.exists()", "org.springframework.web.servlet.support.WebContentGenerator.checkAndPrepare()", "org.springframework.web.servlet.support.WebContentGenerator.checkAndPrepare()", "org.springframework.web.servlet.support.WebContentGenerator.checkAndPrepare()", "org.springframework.web.servlet.support.WebContentGenerator.checkAndPrepare()", "org.springframework.boot.actuate.system.ApplicationPidFileWriterTests.differentEventTypes()", "org.springframework.boot.actuate.system.ApplicationPidFileWriterTests.overridePidFileWithSpring()", "org.springframework.boot.orm.jpa.EntityScanRegistrar.registerBeanDefinitions()", "org.springframework.boot.cloudfoundry.VcapApplicationListener.flatten()", "org.springframework.boot.autoconfigure.web.WebMvcAutoConfigurationTests.overrideDateFormat()", "tachyon.client.BlockOutStreamIntegrationTest.enableLocalWriteTest()", "tachyon.worker.block.allocator.MaxFreeAllocator.allocateBlock()", "tachyon.worker.block.meta.StorageDir.addBlockMeta()", "org.openhab.core.library.types.DateTimeTypeTest.parameters()", "org.openhab.core.jsr223.internal.engine.scriptmanager.Script.initializeSciptGlobals()", "org.openhab.binding.insteonplm.internal.message.MsgFactory.processData()", "org.openhab.binding.insteonplm.InsteonPLMActiveBinding.updated()", "org.graylog2.shared.buffers.processors.DecodingProcessor.processMessage()", "org.graylog2.shared.buffers.processors.ProcessBufferProcessor.onEvent()", "org.glassfish.jersey.server.internal.scanning.FilesScanner.reset()", "org.glassfish.jersey.server.internal.scanning.JarFileScanner.hasNext()", "org.glassfish.jersey.tests.cdi.bv.BaseValidationTest.testFieldValidatedResourceNoParam()", "org.glassfish.jersey.tests.cdi.bv.BaseValidationTest.testFieldValidatedResourceParamProvided()", "org.glassfish.jersey.tests.cdi.bv.BaseValidationTest.testOldFashionedResourceNoParam()", "org.glassfish.jersey.tests.cdi.bv.BaseValidationTest.testOldFashionedResourceParamProvided()", "org.glassfish.jersey.tests.cdi.bv.BaseValidationTest.testParamValidatedResourceNoParam()", "org.glassfish.jersey.tests.cdi.bv.BaseValidationTest.testParamValidatedResourceParamProvided()", "org.glassfish.jersey.tests.cdi.bv.BaseValidationTest.testPropertyValidatedResourceNoParam()", "org.glassfish.jersey.tests.cdi.bv.BaseValidationTest.testPropertyValidatedResourceParamProvided()", "org.drools.core.phreak.SynchronizedPropagationList.addEntry()", "org.drools.core.util.ClassUtils.instantiateObject()", "org.drools.core.util.ClassUtils.instantiateObject()", "org.drools.persistence.SingleSessionCommandService.addInterceptor()", "org.voltdb.compiler.AdHocPlannerWork.makeStoredProcAdHocPlannerWork()", "org.voltdb.TestClientInterface.testPausedMode()", "org.voltdb.compiler.AdHocPlannedStmtBatch.mockStatementBatch()", "org.voltdb.iv2.SpScheduler.setMpDRGateway()", "org.voltdb.regressionsuites.LocalCluster.getListenerAddress()", "org.voltdb.compiler.DDLCompiler.findBestMatchIndexForMatviewMinOrMax()", "org.voltdb.utils.PBDMMapSegment.open()", "org.voltdb.utils.PBDRegularSegment.open()", "org.voltdb.regressionsuites.RegressionSuite.getClient()", "org.voltdb.regressionsuites.RegressionSuite.getClient()", "org.voltdb.regressionsuites.RegressionSuite.getClient()", "org.voltdb.regressionsuites.RegressionSuite.getClient()", "io.fabric8.maven.JsonMojo.getLivenessProbe()", "io.fabric8.maven.JsonMojo.getProbe()", "com.linkedin.restli.internal.server.methods.response.ErrorResponseBuilder.buildErrorResponse()", "com.linkedin.pegasus.generator.JavaDataTemplateGenerator.generateArray()", "com.linkedin.pegasus.generator.JavaDataTemplateGenerator.generateMap()", "com.linkedin.pegasus.generator.JavaDataTemplateGenerator.generateRecord()", "com.linkedin.pegasus.generator.JavaDataTemplateGenerator.generateUnion()", "com.linkedin.r2.filter.compression.ClientCompressionFilter.onRestRequest()", "io.crate.metadata.doc.DocIndexMetaData.getRoutingCol()", "io.crate.metadata.table.TestingTableInfo.Builder.add()", "io.crate.metadata.table.TestingTableInfo.Builder.add()", "io.crate.metadata.table.TestingTableInfo.Builder.add()", "io.crate.metadata.table.TestingTableInfo.Builder.add()", "io.crate.metadata.table.TestingTableInfo.Builder.add()", "io.crate.planner.consumer.ConsumingPlanner.plan()", "com.facebook.presto.operator.scalar.ArraySubscriptOperator.readBlockAndCheckIndex()", "com.facebook.presto.operator.LookupJoinOperator.needsInput()", "com.datastax.driver.core.querybuilder.Insert.values()", "com.datastax.driver.mapping.Mapper.getPreparedQuery()", "com.datastax.driver.mapping.MethodMapper.prepare()", "com.datastax.driver.core.PoolingOptions.getMaxSimultaneousRequestsPerConnectionThreshold()", "com.datastax.driver.core.PoolingOptions.getMaxSimultaneousRequestsPerHostThreshold()", "com.datastax.driver.core.PoolingOptions.setMaxSimultaneousRequestsPerConnectionThreshold()", "com.datastax.driver.core.PoolingOptions.setMaxSimultaneousRequestsPerHostThreshold()", "com.datastax.driver.core.RequestHandler.SpeculativeExecution.retry()", "com.datastax.driver.core.RequestHandler.SpeculativeExecution.sendRequest()", "org.thoughtcrime.securesms.mms.AttachmentManager.setMedia()", "org.thoughtcrime.securesms.notifications.NotificationState.getMarkAsReadIntent()", "jetbrains.mps.ide.ui.tree.MPSTree.stringToPath()", "org.jooq.tools.Convert.ConvertAll.from()", "org.jooq.impl.ResultImpl.formatCSV()", "org.jooq.impl.ResultImpl.formatCSV()", "org.jooq.impl.ResultImpl.formatCSV()", "org.jooq.impl.ResultImpl.formatCSV()", "org.jooq.impl.ResultImpl.formatCSV()", "org.jooq.impl.ResultImpl.formatCSV()", "org.jooq.impl.ResultImpl.formatCSV()", "org.jooq.impl.ResultImpl.formatCSV()", "org.jooq.impl.ResultImpl.formatCSV()", "org.deeplearning4j.models.embeddings.loader.WordVectorSerializer.loadGoogleModel()", "org.deeplearning4j.models.embeddings.loader.WordVectorSerializer.loadGoogleModel()", "org.deeplearning4j.nn.layers.OutputLayer.output()", "org.deeplearning4j.nn.layers.OutputLayer.output()", "org.deeplearning4j.nn.layers.OutputLayer.output()", "org.deeplearning4j.optimize.solver.TestOptimizers.testSphereFnOptHelper()", "org.deeplearning4j.optimize.solvers.BackTrackLineSearch.optimize()", "org.neo4j.desktop.ui.BrowseForDatabaseActionListener.actionPerformed()", "org.neo4j.kernel.AvailabilityGuard.availability()", "org.neo4j.kernel.AvailabilityGuard.availability()", "org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReader.scan()", "org.neo4j.kernel.impl.store.counts.CountsComputerTest.shouldCreateACountStoreWhenDBContainsDenseNodes()", "org.neo4j.kernel.impl.store.counts.CountsRotationTest.shouldCreateEmptyCountsTrackerStoreWhenCreatingDatabase()", "org.neo4j.kernel.impl.util.Neo4jJobScheduler.schedule()", "org.neo4j.kernel.impl.util.Neo4jJobScheduler.schedule()", "org.neo4j.kernel.impl.util.Neo4jJobScheduler.schedule()", "org.neo4j.packstream.PackStream.Unpacker.unpackBytes()", "com.facebook.FacebookSdk.sdkInitialize()", "com.facebook.FacebookSdk.sdkInitialize()", "com.facebook.internal.AttributionIdentifiers.getAndroidId()", "com.facebook.login.KatanaProxyLoginMethodHandler.handleResultOk()", "org.apache.drill.exec.impersonation.TestImpersonationQueries.addMiniDfsBasedStorageAndGenerateTestData()", "org.apache.drill.exec.planner.sql.handlers.DefaultSqlHandler.convertToDrel()", "org.apache.drill.exec.planner.sql.handlers.DefaultSqlHandler.getPlan()", "org.apache.drill.exec.record.selection.SelectionVector4.createNewWrapperCurrent()", "org.apache.drill.exec.testing.ControlsInjectionUtil.setControls()", "org.apache.drill.exec.testing.ControlsInjectionUtil.setControls()", "org.apache.drill.exec.vector.BitVector.allocateNewSafe()", "org.infinispan.commands.CreateCacheCommand.perform()", "org.infinispan.interceptors.distribution.TxDistributionInterceptor.visitRollbackCommand()", "org.infinispan.test.AbstractInfinispanTest.eventually()", "org.infinispan.test.AbstractInfinispanTest.eventually()", "org.infinispan.test.AbstractInfinispanTest.eventually()", "org.infinispan.transaction.tm.DummyTransaction.commit()", "org.infinispan.interceptors.TxInterceptor.invokeNextInterceptorAndVerifyTransaction()", "org.infinispan.interceptors.TxInterceptor.visitCommitCommand()", "org.infinispan.test.MultipleCacheManagersTest.assertNoTransactions()", "org.apache.hadoop.hive.ql.exec.CommonMergeJoinOperator.process()", "org.apache.hadoop.hive.ql.io.orc.OrcInputFormat.generateSplitsInfo()", "org.apache.hadoop.hive.ql.optimizer.ConstantPropagateProcFactory.foldExpr()", "org.apache.hadoop.hive.ql.optimizer.ConstantPropagateProcFactory.foldExpr()", "org.apache.hadoop.hive.ql.parse.CalcitePlanner.CalcitePlannerAction.hepPlan()", "org.apache.hadoop.hive.ql.session.SessionState.close()", "org.apache.hadoop.hive.serde2.avro.TestAvroDeserializer.unionTester()", "org.apache.hive.beeline.Commands.execute()", "org.apache.hive.hcatalog.mapreduce.PartInfo.writeObject()", "org.apache.hive.hcatalog.templeton.AppConfig.dumpEnvironent()", "com.google.javascript.rhino.jstype.ProxyObjectType.isSubtype()", "com.google.javascript.rhino.jstype.TemplatizedType.isSubtype()", "com.google.javascript.rhino.jstype.UnionType.isSubtype()", "com.google.javascript.rhino.jstype.EnumElementType.isSubtype()", "com.google.javascript.jscomp.parsing.parser.Parser.parseFormalParameterList()", "com.google.javascript.rhino.jstype.NoObjectType.isSubtype()", "com.google.javascript.rhino.jstype.UnknownType.isSubtype()", "com.google.javascript.rhino.jstype.RecordType.isSubtype()", "com.google.javascript.rhino.jstype.RecordType.isSubtype()", "com.google.javascript.rhino.jstype.EnumType.isSubtype()", "com.google.javascript.rhino.jstype.FunctionType.isSubtype()", "com.google.javascript.rhino.jstype.NoResolvedType.isSubtype()", "com.google.javascript.rhino.jstype.NoType.isSubtype()", "com.google.javascript.rhino.jstype.ArrowType.isSubtype()", "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype()", "com.hazelcast.client.cache.impl.AbstractClientCacheProxy.getInternal()", "com.hazelcast.client.cache.impl.AbstractClientCacheProxy.getInternal()", "com.hazelcast.client.connection.nio.ClientConnectionManagerImpl.shutdown()", "com.hazelcast.client.connection.nio.ClientConnectionManagerImpl.shutdown()", "com.hazelcast.client.connection.nio.ClientConnectionManagerImpl.start()", "com.hazelcast.client.connection.nio.ClientConnectionManagerImpl.start()", "com.hazelcast.client.protocol.generator.CodecCodeGenerator.generateCodec()", "com.hazelcast.internal.monitors.HealthMonitor.HealthMetrics.toString()", "com.hazelcast.nio.tcp.TcpIpConnection.close()", "com.hazelcast.nio.tcp.TcpIpConnection.close()", "com.hazelcast.spi.impl.operationservice.impl.InvocationNetworkSplitTest.testWaitingInvocations_whenNodeSplitFromCluster()", "com.hazelcast.spi.impl.operationservice.impl.InvocationNetworkSplitTest.testWaitingInvocations_whenNodeSplitFromCluster()", "com.hazelcast.test.TestHazelcastInstanceFactory.createAddresses()", "com.hazelcast.test.TestHazelcastInstanceFactory.createAddresses()"]}, {"CountLineCode": {"MAX": 0, "MIN": 0}, "CountLineComment": {"MAX": 0, "MIN": 0}, "Methods": []}, {"CountLineCode": {"MAX": 0, "MIN": 0}, "CountLineComment": {"MAX": 0, "MIN": 0}, "Methods": []}, {"CountLineCode": {"MAX": 0, "MIN": 0}, "CountLineComment": {"MAX": 0, "MIN": 0}, "Methods": []}, {"CountLineCode": {"MAX": 0, "MIN": 0}, "CountLineComment": {"MAX": 0, "MIN": 0}, "Methods": []}]